/**
* Copyright (c) 2011 ProDraw. All rights reserved.
*/
#ifndef PRODRAW_CDIAGRAMLIBRARYMODEL_H
#define PRODRAW_CDIAGRAMLIBRARYMODEL_H

#include <QtGui>
#include <QtXml/QtXml>
#include <core/CGlobal>

class CDiagramLibraryItem;
class CDiagramLibraryModel;
class CDiagramLibraryCategoryModel;

enum { 
	FilterNameRole = Qt::UserRole + 11,
	FilterGroupRole = Qt::UserRole + 12
};

// The generation way of category model
// information
const QString AutoGeneratedCategory = QString("auto"); // generated automatically, by codes
const QString XmlConfiguredCategory = QString("xml" ); // generated via xml configuration

// The way of items can be inited
// xml, image, source code, or scripts.
const QString InitedByCode		    = QString("code");
const QString InitedByScript	    = QString("script");
const QString InitedByXml           = QString("xml");
const QString InitedByImage         = QString("image");

// used to hold one item information
class CORE_EXPORT CDiagramLibraryItem
{
public:
	CDiagramLibraryItem();

	QString toString();
	void fromString(const QString &content);
	
	void toXml(QDomElement &e);
	void fromXml(const QDomElement &e);

	QIcon icon();
	void setIcon(const QIcon &value);

	QString iconUrl();
	void setIconUrl(const QString &value);

	QString name();
	void setName(const QString &value);

	QString desc();
	void setDesc(const QString &value);

	QString group();
	void setGroup(const QString &group);

	QString libraryCategory();
	void setLibraryCategory(const QString &value);

	QString metaType();
	void setMetaType(const QString &value);

	QString metaName();
	void setMetaName(const QString &value);

	QString initMethod();
	void setInitMethod(const QString &value);

	QString initParam();
	void setInitParam(const QString &value);

	qreal initWidth();
	void setInitWidth(qreal value);

	qreal initHeight();
	void setInitHeight(qreal value);

private:
    Q_DISABLE_COPY(CDiagramLibraryItem)

	QIcon		m_icon;
	QString		m_name;
	QString		m_desc;
	QString		m_group;
	QString		m_libCategory;
	QString		m_iconUrl;
	QString		m_metaType;
	QString		m_metaName;
	QString		m_initMethod;
	QString		m_initParam;
	qreal		m_initWidth;
	qreal		m_initHeight;

}; // End of class CDiagramLibraryItem

class CORE_EXPORT CDiagramLibraryCategoryModel: public QAbstractListModel
{
public:
	CDiagramLibraryCategoryModel(QObject *parent = NULL, const QString &file = QString("") );

	// QAbstractListModel's member functions
	virtual QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
    virtual int rowCount(const QModelIndex &parent = QModelIndex()) const;
	//virtual int columnCount(const QModelIndex &parent = QModelIndex()) const;
    virtual bool setData(const QModelIndex & index, const QVariant & value, int role = Qt::EditRole);
    virtual Qt::ItemFlags flags (const QModelIndex & index ) const;
    virtual bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());

	QListView::ViewMode viewMode() const;
	void setViewMode(QListView::ViewMode m);

	CDiagramLibraryItem* itemAt(const QModelIndex &index) const;
	CDiagramLibraryItem* itemAt(int row) const;

	QList<QString> groups();
	QList<CDiagramLibraryItem*> items();
	void addItem(CDiagramLibraryItem *item);
	void removeItem(CDiagramLibraryItem *item);
	void setItems(const QList<CDiagramLibraryItem*> &value);

	bool selected();
	int order();
	int count();
	QString name();
	QString description();

	void setSelected(bool value);
	void setOrder(int value);
	void setName(const QString &value);
	void setDescription(const QString &value);

    void setFilePath(const QString &value);
    QString filePath();

	QString	toString();
	void fromString(const QString &value);

	void toXml(QDomDocument &doc);
	void fromXml(const QDomDocument &doc);

protected:
	void loadFromString(const QString &content);
	void loadFromFile(const QString &fullPath);
	CDiagramLibraryItem* loadItem(const QDomElement &n);

	int			m_order;
	QString		m_name;
	QString		m_desc;
	QString		m_config;
	QString		m_generate;
    QString     m_filePath;
	bool		m_selected;

	QListView::ViewMode								m_viewMode;
	QList<CDiagramLibraryItem*>						m_items;
	QMap<QString, QList<CDiagramLibraryItem*>* >	m_groups;

private:
    Q_DISABLE_COPY(CDiagramLibraryCategoryModel)

	friend class CDiagramLibraryModel;

}; // End of class CShapeCategoryModel

class CORE_EXPORT CDiagramLibraryModel: public QObject
{
	Q_OBJECT

public:
	void addCategory(CDiagramLibraryCategoryModel *model);
	CDiagramLibraryCategoryModel* getCategory(const QString &name);
	QList<CDiagramLibraryCategoryModel*> categories();

	void loadFromString(const QString &content);
	void loadFromFile(const QString &path, const QString &file);
	
    void setLibraryRootPath(const QString &path);
    QString libraryRootPath() const;

	// create single instance of CDiagramLibraryModel
	static CDiagramLibraryModel* instance()
	{
		if (!m_inst)
			m_inst = new CDiagramLibraryModel();
		return m_inst;
	}

private:
	CDiagramLibraryModel();
    Q_DISABLE_COPY(CDiagramLibraryModel)

	CDiagramLibraryCategoryModel* loadCategory(const QDomElement &element);

    QString                                 m_libraryRootPath;
	QList<CDiagramLibraryCategoryModel*>	m_ctgs;
	static CDiagramLibraryModel				*m_inst;
}; // End of class CDiagramLibraryModel

class CORE_EXPORT CSearchResultModel: public CDiagramLibraryCategoryModel
{
public:
	CSearchResultModel();

	void loadModel();

}; // End of class CSearchResultModel

#endif // PRODRAW_CDIAGRAMLIBRARYMODEL_H
